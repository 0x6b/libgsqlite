name: Build

on:
  push:
    branches: [ "master" ]
    tags: ["v*"]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux-x64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build debug
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose -- --skip test_extension
    - name: Build release
      run: cargo build --release
    - uses: actions/upload-artifact@v3
      with:
        name: linux-x64
        path: target/release/libgsqlite.so

  build-linux-x86:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install target
      run: sudo apt install -y gcc-multilib && rustup target install i686-unknown-linux-gnu
    - name: Build release
      run: cargo build --release --target=i686-unknown-linux-gnu
    - uses: actions/upload-artifact@v3
      with:
        name: linux-x86
        path: target/i686-unknown-linux-gnu/release/libgsqlite.so

  build-windows-x64:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build debug
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose -- --skip test_extension
    - name: Build release
      run: cargo build --release
    - uses: actions/upload-artifact@v3
      with:
        name: windows-x64
        path: target/release/gsqlite.dll

  build-windows-x86:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install target
      run: rustup target add i686-pc-windows-msvc
    - name: Build release
      run: cargo build --release --target=i686-pc-windows-msvc
    - uses: actions/upload-artifact@v3
      with:
        name: windows-x86
        path: target/i686-pc-windows-msvc/release/gsqlite.dll

  build-macos-x64:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build debug
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose -- --skip test_extension
    - name: Build release
      run: cargo build --release
    - uses: actions/upload-artifact@v3
      with:
        name: macos-x64
        path: target/release/libgsqlite.dylib

  create-release:

    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build-linux-x64, build-linux-x86, build-windows-x64, build-windows-x86, build-macos-x64 ]
    runs-on: ubuntu-latest

    steps:
    - name: Add current date to env
      run: echo "RELEASE_DATE=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
    - uses: actions/download-artifact@v3
      with:
        path: .
    - name: Archive linux-x64
      run: mv linux-x64/libgsqlite.so ./libgsqlite.so && tar -zcvf libgsqlite-linux-x64.tar.gz libgsqlite.so && rm libgsqlite.so
    - name: Archive linux-x86
      run: mv linux-x86/libgsqlite.so ./libgsqlite.so && tar -zcvf libgsqlite-linux-x86.tar.gz libgsqlite.so && rm libgsqlite.so
    - name: Archive windows-x64
      run: mv windows-x64/gsqlite.dll ./gsqlite.dll && zip gsqlite-windows-x64.zip gsqlite.dll && rm gsqlite.dll
    - name: Archive windows-x86
      run: mv windows-x86/gsqlite.dll ./gsqlite.dll && zip gsqlite-windows-x86.zip gsqlite.dll && rm gsqlite.dll
    - name: Archive macos-x64
      run: mv macos-x64/libgsqlite.dylib ./libgsqlite.dylib && zip libgsqlite-macos-x64.zip libgsqlite.dylib && rm libgsqlite.dylib

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ env.RELEASE_DATE }} ${{ github.ref }}
        body: Release ${{ env.RELEASE_DATE }} ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload linux-x64 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libgsqlite-linux-x64.tar.gz
        asset_name: libgsqlite-linux-x64.tar.gz
        asset_content_type: application/octet-stream

    - name: Upload linux-x86 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libgsqlite-linux-x86.tar.gz
        asset_name: libgsqlite-linux-x86.tar.gz
        asset_content_type: application/octet-stream

    - name: Upload windows-x64 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gsqlite-windows-x64.zip
        asset_name: gsqlite-windows-x64.zip
        asset_content_type: application/octet-stream

    - name: Upload windows-x86 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gsqlite-windows-x86.zip
        asset_name: gsqlite-windows-x86.zip
        asset_content_type: application/octet-stream

    - name: Upload macos-x64 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libgsqlite-macos-x64.zip
        asset_name: libgsqlite-macos-x64.zip
        asset_content_type: application/octet-stream
